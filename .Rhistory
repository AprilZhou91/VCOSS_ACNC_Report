VCOSS_ACNC_Datasets_14to18 <- lapply(ACNC_Datasets_14to18,
function(data){
select(data,
any_of(VCOSS_ACNC_2016_columns))
})
lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
colnames(VCOSS_ACNC_Datasets_14to18$datadotgov_ais17)[which(str_detect(colnames(VCOSS_ACNC_Datasets_14to18$datadotgov_ais17),
"government|govt"))]
colnames(VCOSS_ACNC_Datasets_14to18$datadotgov_ais17)
colnames(ACNC_Datasets_14to18$datadotgov_ais17)[which(str_detect(colnames(ACNC_Datasets_14to18$datadotgov_ais17),
"govt|government|gvt"))]
colnames(ACNC_Datasets_14to18$datadotgov_ais18)[which(str_detect(colnames(ACNC_Datasets_14to18$datadotgov_ais17),
"govt|government|gvt"))]
colnames(ACNC_Datasets_14to18$datadotgov_ais18)[which(str_detect(colnames(ACNC_Datasets_14to18$datadotgov_ais18),
"govt|government|gvt"))]
VCOSS_ACNC_Datasets_14to18 <- lapply(ACNC_Datasets_14to18,
function(data){
select(data,
any_of(VCOSS_ACNC_2016_columns),
contains("govt|gvt|government"))
})
lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
lapply(ACNC_Datasets_14to18,
function(data){
select(data,
# any_of(VCOSS_ACNC_2016_columns),
contains("govt|gvt|government"))
})
lapply(ACNC_Datasets_14to18,
function(data){
select(data,
# any_of(VCOSS_ACNC_2016_columns),
contains("government"))
})
lapply(ACNC_Datasets_14to18,
function(data){
select(data,
# any_of(VCOSS_ACNC_2016_columns),
contains("government_grants"),
contains("revenue_from_government"))
})
lapply(ACNC_Datasets_14to18,
function(data){
select(data,
# any_of(VCOSS_ACNC_2016_columns),
contains("government_grants"),
government_grants = contains("revenue_from_government"))
})
VCOSS_ACNC_Datasets_14to18 <- lapply(ACNC_Datasets_14to18,
function(data){
select(data,
# any_of(VCOSS_ACNC_2016_columns),
contains("government_grants"),
government_grants = contains("revenue_from_government"))
})
lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
VCOSS_ACNC_Datasets_14to18 <- lapply(ACNC_Datasets_14to18,
function(data){
select(data,
any_of(VCOSS_ACNC_2016_columns),
contains("government_grants"),
government_grants = contains("revenue_from_government"))
})
lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
VCOSSACNC_missingcols <- lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
sapply(VCOSSACNC_missingcols,
length)
sapply(VCOSSACNC_missingcols,
length) >0
sum(sapply(VCOSSACNC_missingcols,
length) > 0)
stop(paste("There are missing columns in the VCOSS-filtered ACNC Data.",
"See error number VCOSS_MISSINGCOLS in Data_Cleaning.R script.",
sep = "\n"))
stop(paste("There are missing columns in the VCOSS-filtered ACNC Data.",
"Ctrl+F `VCOSS_MISSINGCOLS` in Data_Cleaning.R script.",
sep = "\n"))
stop(paste("There are missing columns in the VCOSS-filtered ACNC Data.",
"Ctrl+F: `VCOSS_MISSINGCOLS` in Data_Cleaning.R script.",
sep = "\n"))
stop(paste("There are missing columns in the VCOSS-filtered ACNC Data.",
"Ctrl+F error code: `VCOSS_MISSINGCOLS_423` in Data_Cleaning.R script.",
sep = "\n"))
sum(sapply(VCOSSACNC_missingcols, length) > 0) >0
VCOSS_ACNC_2016_columns
Income_cols <- make_clean_names(c("government grants",
"donations and bequests",
"all other revenue",
"total revenue",
"other income",
"total gross income"))
Income_cols <- make_clean_names(c("government grants",
"donations and bequests",
"all other revenue",
"total revenue",
"other income")) ## hard coded from VCOSS_ACNC_2016_columns
Income_cols
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
income = sum(all_of(Income_cols)))
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
income = sum(all_of(get(Income_cols))))
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
income = sum(all_of(get(Income_cols)))) %>% View("mutate")
colnames(ACNC_Datasets_14to18$datadotgov_ais18)
VCOSS_ACNC_2016_columns <- c(VCOSS_ACNC_2016_columns,
make_clean_names("Year",
"Valid ABN",
"community sector other",
"community sector main",
"vic community sector",
"cleaned charitysize",
"correct charitysize",
"VCOSS charitysize")) ## hard coded from created variables in code **above** only
VCOSS_ACNC_Datasets_14to18 <- lapply(ACNC_Datasets_14to18,
function(data){
select(data,
any_of(VCOSS_ACNC_2016_columns),
contains("government_grants"),
government_grants = contains("revenue_from_government"))
})
VCOSSACNC_missingcols <- lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
sum(sapply(VCOSSACNC_missingcols, length) >0) >0
if(sum(sapply(VCOSSACNC_missingcols, length) >0) >0) {
stop(paste("There are missing columns in the VCOSS-filtered ACNC Data.",
"Ctrl+F error code: `VCOSS_MISSINGCOLS_423` in Data_Cleaning.R script.",
sep = "\n"))
}
Income_cols <- make_clean_names(c("government grants",
"donations and bequests",
"all other revenue",
"total revenue",
"other income")) ## hard coded from VCOSS_ACNC_2016_columns
VCOSS_ACNC_Datasets_14to18$datadotgov_ais16
VCOSS_ACNC_Datasets_14to18$datadotgov_ais16 %>% View()
VCOSS_ACNC_2016_columns
c(VCOSS_ACNC_2016_columns,
make_clean_names("Year",
"Valid ABN",
"community sector other",
"community sector main",
"vic community sector",
"cleaned charitysize",
"correct charitysize",
"VCOSS charitysize"))
c(VCOSS_ACNC_2016_columns,
make_clean_names(c("Year",
"Valid ABN",
"community sector other",
"community sector main",
"vic community sector",
"cleaned charitysize",
"correct charitysize",
"VCOSS charitysize")))
VCOSS_ACNC_2016_columns <- c(VCOSS_ACNC_2016_columns,
make_clean_names(c("Year",
"Valid ABN",
"community sector other",
"community sector main",
"vic community sector",
"cleaned charitysize",
"correct charitysize",
"VCOSS charitysize"))) ## hard coded from created variables in code **above** only
VCOSS_ACNC_Datasets_14to18 <- lapply(ACNC_Datasets_14to18,
function(data){
select(data,
any_of(VCOSS_ACNC_2016_columns),
contains("government_grants"),
government_grants = contains("revenue_from_government"))
})
VCOSSACNC_missingcols <- lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
if(sum(sapply(VCOSSACNC_missingcols, length) >0) >0) {
stop(paste("There are missing columns in the VCOSS-filtered ACNC Data.",
"Ctrl+F error code: `VCOSS_MISSINGCOLS_423` in Data_Cleaning.R script.",
sep = "\n"))
}
VCOSSACNC_missingcols
VCOSS_ACNC_2016_columns <- c(VCOSS_ACNC_2016_columns,
"Year"
make_clean_names(c("Valid ABN",
"community sector other",
"community sector main",
"vic community sector",
"cleaned charitysize",
"correct charitysize",
"VCOSS charitysize"))) ## hard coded from created variables in code **above** only
VCOSS_ACNC_2016_columns <- c(VCOSS_ACNC_2016_columns,
"Year",
make_clean_names(c("Valid ABN",
"community sector other",
"community sector main",
"vic community sector",
"cleaned charitysize",
"correct charitysize",
"VCOSS charitysize"))) ## hard coded from created variables in code **above** only
VCOSS_ACNC_Datasets_14to18 <- lapply(ACNC_Datasets_14to18,
function(data){
select(data,
any_of(VCOSS_ACNC_2016_columns),
contains("government_grants"),
government_grants = contains("revenue_from_government"))
})
VCOSSACNC_missingcols <- lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
VCOSSACNC_missingcols
colnames(ACNC_Datasets_14to18$datadotgov_ais16)
VCOSS_ACNC_2016_columns <- c(VCOSS_ACNC_2016_columns,
"Year",
"Valid_ABN",
"community_sector_other",
"community_sector_main",
"vic_community_sector",
"cleaned_charitysize",
"correct_charitysize",
"VCOSS_charitysize") ## hard coded from created variables in code **above** only
VCOSS_ACNC_Datasets_14to18 <- lapply(ACNC_Datasets_14to18,
function(data){
select(data,
any_of(VCOSS_ACNC_2016_columns),
contains("government_grants"),
government_grants = contains("revenue_from_government"))
})
VCOSSACNC_missingcols <- lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
VCOSSACNC_missingcols
VCOSS_ACNC_2016_columns <- colnames(clean_names(read_excel("Datasets/VCOSS - 2016 ACNC Data.xlsx")))
VCOSS_ACNC_2016_columns <- str_remove_all(VCOSS_ACNC_2016_columns, "_2016")
VCOSS_ACNC_2016_columns <- c(VCOSS_ACNC_2016_columns,
"Year",
"Valid_ABN",
"community_sector_other",
"community_sector_main",
"vic_community_sector",
"cleaned_charitysize",
"correct_charitysize",
"VCOSS_charitysize") ## hard coded from created variables in code **above** only
VCOSS_ACNC_Datasets_14to18 <- lapply(ACNC_Datasets_14to18,
function(data){
select(data,
any_of(VCOSS_ACNC_2016_columns),
contains("government_grants"),
government_grants = contains("revenue_from_government"))
})
VCOSSACNC_missingcols <- lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
missing_cols <- VCOSS_ACNC_2016_columns[which(!(VCOSS_ACNC_2016_columns %in% colnames(data)))]
return(missing_cols)
})
VCOSSACNC_missingcols
if(sum(sapply(VCOSSACNC_missingcols, length) >0) >0) {
stop(paste("There are missing columns in the VCOSS-filtered ACNC Data.",
"Ctrl+F error code: `VCOSS_MISSINGCOLS_423` in Data_Cleaning.R script.",
sep = "\n"))
}
Income_cols <- c("government_grants",
"donations_and_bequests",
"all_other_revenue",
"total_revenue",
"other_income") ## hard coded from VCOSS_ACNC_2016_columns
colnames(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16)
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
reported_income = sum(all_of(get(Income_cols))))
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
reported_income = sum(all_of(get(Income_cols))),
income_variance = abs(reported_income - total_gross_income))
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
reported_income = sum(all_of(get(Income_cols))),
income_variance = abs(reported_income - total_gross_income)) %>% View("mut")
temp_a <- 6009679
temp_a <- 15213907
temp_b <- 2679737
temp_a - temp_b
abs(temp_a - temp_b)
331886+1824499
331886+1824499
Inaccurate_income <- function(data) {
data <- mutate(data,
reported_income = sum(all_of(get(Income_cols))),
income_variance = abs(reported_income - total_gross_income),
inaccurate_income_reported = case_when(cleaned_charitysize == "S" &
income_variance > 25000 ~ TRUE,
cleaned_charitysize == "M" &
income_variance > 100000 ~ TRUE,
cleaned_charitysize == "L" &
income_variance > 1000000 ~ TRUE))
data$inaccurate_income_reported <- replace_na(data$inaccurate_income_reported,
FALSE)
return(data)
}
lapply(VCOSS_ACNC_Datasets_14to18,
Inaccurate_income)
temp <- lapply(VCOSS_ACNC_Datasets_14to18,
Inaccurate_income)
View(temp[3]) %>% View("2016")
View(temp[[3]]) %>% View("2016")
temp[3]
temp[3] %>% View("2016")
View(temp$datadotgov_ais16,
"2016")
summarise(temp$datadotgov_ais16,
length(inaccurate_income_reported == TRUE))
summarise(ungroup(temp$datadotgov_ais16),
length(inaccurate_income_reported == TRUE))
summarise(ungroup(temp$datadotgov_ais16),
count_true = length(inaccurate_income_reported == TRUE),
count_false = length(inaccurate_income_reported == FALSE),
valid_pc = count_false / nrow(temp$datadotgov_ais16))
summarise(ungroup(temp$datadotgov_ais16),
count_true = sum(inaccurate_income_reported == TRUE),
count_false = sum(inaccurate_income_reported == FALSE),
valid_pc = count_false / nrow(temp$datadotgov_ais16))
data <- mutate(data,
reported_income = sum(all_of(get(Income_cols))),
income_variance = abs(reported_income - total_gross_income),
inaccurate_income_reported = case_when(cleaned_charitysize == "S" &
income_variance > 25000 ~ "invalid",
cleaned_charitysize == "M" &
income_variance > 100000 ~ "invalid",
cleaned_charitysize == "L" &
income_variance > 1000000 ~ "invalid"))
Inaccurate_income <- function(data) {
data <- mutate(data,
reported_income = sum(all_of(get(Income_cols))),
income_variance = abs(reported_income - total_gross_income),
inaccurate_income_reported = case_when(cleaned_charitysize == "S" &
income_variance > 25000 ~ "invalid",
cleaned_charitysize == "M" &
income_variance > 100000 ~ "invalid",
cleaned_charitysize == "L" &
income_variance > 1000000 ~ "invalid"))
data$inaccurate_income_reported <- replace_na(data$inaccurate_income_reported,
FALSE)
return(data)
}
temp <- lapply(VCOSS_ACNC_Datasets_14to18,
Inaccurate_income)
Inaccurate_income <- function(data) {
data <- mutate(data,
reported_income = sum(all_of(get(Income_cols))),
income_variance = abs(reported_income - total_gross_income),
inaccurate_income_reported = case_when(cleaned_charitysize == "S" &
income_variance > 25000 ~ "invalid",
cleaned_charitysize == "M" &
income_variance > 100000 ~ "invalid",
cleaned_charitysize == "L" &
income_variance > 1000000 ~ "invalid"))
data$inaccurate_income_reported <- replace_na(data$inaccurate_income_reported,
"valid")
return(data)
}
temp <- lapply(VCOSS_ACNC_Datasets_14to18,
Inaccurate_income)
summarise(ungroup(temp$datadotgov_ais16),
count_inaccurate = sum(inaccurate_income_reported == "inaccurate"),
count_accurate = sum(inaccurate_income_reported == "accurate"),
inaccurate_pc = count_inaccurate / nrow(temp$datadotgov_ais16))
Inaccurate_income <- function(data) {
data <- mutate(data,
reported_income = sum(all_of(get(Income_cols))),
income_variance = abs(reported_income - total_gross_income),
inaccurate_income_reported = case_when(cleaned_charitysize == "S" &
income_variance > 25000 ~ "inaccurate",
cleaned_charitysize == "M" &
income_variance > 100000 ~ "inaccurate",
cleaned_charitysize == "L" &
income_variance > 1000000 ~ "inaccurate"))
data$inaccurate_income_reported <- replace_na(data$inaccurate_income_reported,
"accurate")
return(data)
}
temp <- lapply(VCOSS_ACNC_Datasets_14to18,
Inaccurate_income)
summarise(ungroup(temp$datadotgov_ais16),
count_inaccurate = sum(inaccurate_income_reported == "inaccurate"),
count_accurate = sum(inaccurate_income_reported == "accurate"),
inaccurate_pc = count_inaccurate / nrow(temp$datadotgov_ais16))
filter(temp$datadotgov_ais16,
inaccurate_income_reported == "inaccurate")
InaccurateIncome_2016 <- filter(temp$datadotgov_ais16,
inaccurate_income_reported == "inaccurate")
VCOSS_ACNC_2016_data <- clean_names(read_excel("Datasets/VCOSS - 2016 ACNC Data.xlsx"))
filter(VCOSS_ACNC_2016_data,
abn %in% InaccurateIncome_2016$abn)
filter(VCOSS_ACNC_2016_data,
abn %in% InaccurateIncome_2016$abn) %>% View("original")
Income_cols <- c("government_grants",
"donations_and_bequests",
"all_other_revenue",
"other_income") ## hard coded from VCOSS_ACNC_2016_columns
Inaccurate_income <- function(data) {
data <- mutate(data,
reported_income = sum(all_of(get(Income_cols))),
income_variance = abs(reported_income - total_gross_income),
inaccurate_income_reported = case_when(cleaned_charitysize == "S" &
income_variance > 25000 ~ "inaccurate",
cleaned_charitysize == "M" &
income_variance > 100000 ~ "inaccurate",
cleaned_charitysize == "L" &
income_variance > 1000000 ~ "inaccurate"))
data$inaccurate_income_reported <- replace_na(data$inaccurate_income_reported,
"accurate")
return(data)
}
temp <- lapply(VCOSS_ACNC_Datasets_14to18,
Inaccurate_income)
InaccurateIncome_2016 <- filter(temp$datadotgov_ais16,
inaccurate_income_reported == "inaccurate")
filter(VCOSS_ACNC_2016_data,
abn %in% InaccurateIncome_2016$abn) %>% View("original")
View(InaccurateIncome_2016)
Inaccurate_income <- function(data) {
data <- mutate(data,
reported_income = sum(get(Income_cols)),
income_variance = abs(reported_income - total_gross_income),
inaccurate_income_reported = case_when(cleaned_charitysize == "S" &
income_variance > 25000 ~ "inaccurate",
cleaned_charitysize == "M" &
income_variance > 100000 ~ "inaccurate",
cleaned_charitysize == "L" &
income_variance > 1000000 ~ "inaccurate"))
data$inaccurate_income_reported <- replace_na(data$inaccurate_income_reported,
"accurate")
return(data)
}
temp <- lapply(VCOSS_ACNC_Datasets_14to18,
Inaccurate_income)
InaccurateIncome_2016 <- filter(temp$datadotgov_ais16,
inaccurate_income_reported == "inaccurate")
VCOSS_ACNC_2016_data <- clean_names(read_excel("Datasets/VCOSS - 2016 ACNC Data.xlsx"))
filter(VCOSS_ACNC_2016_data,
abn %in% InaccurateIncome_2016$abn) %>% View("original")
View(InaccurateIncome_2016)
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
reported_income = sum(Income_cols))
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
reported_income = sum(get(Income_cols)))
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
reported_income = sum(get(Income_cols))) %>% View("new")
mutate(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16,
reported_income = sum(get(all_of(Income_cols)))) %>% View("new")
mutate(rowwise(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16),
reported_income = sum(get(all_of(Income_cols)))) %>% View("new")
mutate(rowwise(VCOSS_ACNC_Datasets_14to18$datadotgov_ais16),
reported_income = sum(c_across(Income_cols))) %>% View("new")
Inaccurate_income <- function(data) {
data <- mutate(data,
reported_income = sum(c_across(Income_cols)),
income_variance = abs(reported_income - total_gross_income),
inaccurate_income_reported = case_when(cleaned_charitysize == "S" &
income_variance > 25000 ~ "inaccurate",
cleaned_charitysize == "M" &
income_variance > 100000 ~ "inaccurate",
cleaned_charitysize == "L" &
income_variance > 1000000 ~ "inaccurate"))
data$inaccurate_income_reported <- replace_na(data$inaccurate_income_reported,
"accurate")
return(data)
}
temp <- lapply(VCOSS_ACNC_Datasets_14to18,
Inaccurate_income)
InaccurateIncome_2016 <- filter(temp$datadotgov_ais16,
inaccurate_income_reported == "inaccurate")
VCOSS_ACNC_2016_data <- clean_names(read_excel("Datasets/VCOSS - 2016 ACNC Data.xlsx"))
filter(VCOSS_ACNC_2016_data,
abn %in% InaccurateIncome_2016$abn) %>% View("removed but in original")
filter(InaccurateIncome_2016,
abn %in% VCOSS_ACNC_2016_data$abn) %>% View("removed but in original")
VCOSS_ACNC_Datasets_14to18 <- lapply(VCOSS_ACNC_Datasets_14to18,
Inaccurate_income)
lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
filter(data,
inaccurate_income_reported == "accurate")
})
VCOSS_ACNC_Datasets_14to18 <- lapply(VCOSS_ACNC_Datasets_14to18,
function(data) {
filter(data,
inaccurate_income_reported == "accurate")
})
